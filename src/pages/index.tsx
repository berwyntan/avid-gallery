import { type NextPage } from "next";
import Head from "next/head";
import TagButton from "~/components/tagButton";
import Images from "~/components/images";
import { appRouter } from "~/server/api/root";
import { createServerSideHelpers } from "@trpc/react-query/server";

import { api } from "~/utils/api";
import { prisma } from "~/server/db";
import superjson from "superjson";
import { generateSSGHelper } from "~/server/api/helpers/ssgHelper";
import TagButtonsLayout from "~/components/tagButtonsLayout";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from abc" });
  const { data: getAll, isLoading } = api.image.getAll.useQuery();

  const { data: allTags, isLoading: isLoading2 } = api.tag.getAll.useQuery();
  const { data: filtered } = api.image.findByTag.useQuery({ text: "fantasy" });

  console.log(filtered);

  if (isLoading) return <div>Loading...</div>;
  if (!getAll) return <div>Something went wrong</div>;
  if (isLoading2) return <div>Loading...</div>;
  if (!allTags) return <div>Something went wrong</div>;

  return (
    <>
      <Head>
        <title>ai.avid prompts</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#090016] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-6 px-1 py-12 ">
          {/* <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            ai<span className="text-[hsl(194,62%,58%)]">.avid</span> prompts
          </h1> */}
          <div className="flex-start flex flex-wrap gap-2 md:gap-4">
            {/* {allTags.map((tag) => {
              return <TagButton key={tag.id} tag={tag.name} />;
            })} */}
            <TagButtonsLayout allTags={allTags} />
          </div>
          {/* <p className="text-2xl text-white">
            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
          </p> */}

          <div className="flex-start mt-8 flex flex-row flex-wrap justify-center">
            
            <Images getAll={getAll} />
          </div>
        </div>
      </main>
    </>
  );
};

export const getStaticProps = async () => {
  
  const helpers = generateSSGHelper()

  await helpers.image.getAll.prefetch();
  await helpers.tag.getAll.prefetch();

  return {
    props: {
      trpcState: helpers.dehydrate(),
    },
    revalidate: 36000,
  };
}

export default Home;
